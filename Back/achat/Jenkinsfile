pipeline {
    agent any
    parameters {
        choice(name: 'CLOUD_TYPE', choices: ['public', 'private'], description: 'Choose the cloud type for deployment')
    }
    environment {
        SONARQUBE_URL = 'http://192.168.100.10:9000'
        SONARQUBE_USERNAME = 'admin'
        SONARQUBE_PASSWORD = 'Facebook1'
        BRANCH_NAME = 'FournisseurTest'
        registry_front = "mohamedridhaa/achats"
        registry = "mohamedridhaa/achat-back"
        registryCredential = 'DockerHub'
        dockerImage = ''
        INFISICAL_TOKEN = credentials('infisical-service-token')
        SNYK_INSTALLATION = 'SnykV2Plugin'
        SNYK_TOKEN = 'Snyk'
        GITHUB_CREDENTIALS = credentials('Github')
        DEFECTDOJO_URL = 'http://192.168.22.12:8080/'
        DEFECTDOJO_API_TOKEN = '7720bd55755821192c11d23305ba3dd1493558b5' // Replace with your actual token
        ENGAGEMENT_ID = '1' // Replace with the actual engagement ID
        SSH_KEY_PATH = '/var/lib/jenkins/.ssh/ansible.pem'
    }
    stages {
        stage("clone repo") {
            steps {
                script {
                    try {
                        git url: 'https://github.com/rehamtaieb/application.git',
                            branch: 'FournisseurTest',
                            credentialsId: 'Github'
                    } catch (Exception e) {
                        emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                        throw e
                    }
                }
            }
        }
        stage('Git Secret Management') {
            steps {
                script {
                    try {
                        sh 'rm trufflehog.json || true'
                        sh 'docker run gesellix/trufflehog --json https://github.com/rehamtaieb/application.git > trufflehog.json'
                        sh 'cat trufflehog.json'
                    } catch (Exception e) {
                        emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Trufflehog detected potential secrets in the repository. Please review and remove them before proceeding.', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                        throw e
                    }
                }
            }
        
        }
        stage('Infisical Secret Management') {
            steps { 
                dir('Back/achat') {
                    script {
                        try {
                           sh("infisical secrets --env=dev --path=/")
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Infisical Secret Management step encountered an error. Please review and remove them before proceeding.', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
        stage('snyk_analysis') {
            steps {
                dir('Back/achat') {
                    script {
                        echo 'Testing for dependencies, code source, and IaC...'
                        try {
                            // Scanning dependencies and code source
                            snykSecurity(
                                snykInstallation: SNYK_INSTALLATION,
                                snykTokenId: SNYK_TOKEN,
                                failOnIssues: false,
                                monitorProjectOnBuild: true,
                                additionalArguments: '--all-projects --json '
                            )
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Snyk Analysis encountered an error.', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
        stage('snyk IaC'){
            steps{
                dir('Back/achat') {
                    script {
                        try {
                            echo 'Testing IaC'
                           
                            sh 'SNYK_TOKEN=ab0b25ac-cdc9-4562-a3dd-cdc7bd9a5db5 snyk iac test . --report'
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                        }
                    }
                }
            }
        }
        stage('generating snyk IaC'){
            steps{
                dir('Back/achat') {
                    script {
                        try {
                            echo 'generating IaC report'
                            sh 'SNYK_TOKEN=ab0b25ac-cdc9-4562-a3dd-cdc7bd9a5db5 snyk iac test . --json > ${WORKSPACE}/snyk_iac.json'
                            
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                        }
                    }
                }
            }
        }
        
        stage('MVN CLI') {
            steps {
                dir('Back/achat') {
                    script {
                        try {
                            sh 'mvn clean'
                            sh 'mvn compile'
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
        stage('Unit Tests') {
            steps {
                dir('Back/achat') {
                    script {
                        try {
                            sh 'mvn test'
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
        stage('SonarQube') {
            steps {
                dir('Back/achat') {
                    script {
                        try {
                            sh "mvn sonar:sonar -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_USERNAME} -Dsonar.password=${SONARQUBE_PASSWORD} "
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }

        stage('Nexus deployment') {
            steps {
                dir('Back/achat') {
                    script {
                        try {
                            sh 'mvn clean deploy -DskipTests'
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
        stage('Building image Back') {
            steps {
                dir('Back/achat') {
                    script {
                        try {
                            dockerImage = docker.build registry + ":tagname"
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
         stage('Building image Front') {
            steps {
                dir('Front/crud-tuto-front') {
                    script {
                        try {
                          dockerImageFront = docker.build registry_front + ":tagname"
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Deploy Back image on Docker') {
            steps {
                dir('Back/achat') {
                    script {
                        try {
                            docker.withRegistry('', registryCredential) {
                                dockerImage.push()
                            }
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
        stage('Deploy Front image on Docker') {
            steps {
                dir('Front/crud-tuto-front') {
                    script {
                        try {
                             docker.withRegistry('', registryCredential) {
                                dockerImageFront.push()
                            }
                            
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
        stage('Snyk Containers test'){
            steps{
                dir('Back/achat') {
                    script {
                        try {
                            echo 'Testing Containers'
                            sh 'SNYK_TOKEN=ab0b25ac-cdc9-4562-a3dd-cdc7bd9a5db5 snyk container monitor mohamedridhaa/achats:tagname'
                            sh 'SNYK_TOKEN=ab0b25ac-cdc9-4562-a3dd-cdc7bd9a5db5 snyk container monitor mohamedridhaa/achat-back:tagname'
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                        }
                    }
                }
            }
        }
        stage('Scan with Trivy') {
            steps {
                script {
                    // Run Trivy scan and save the report as trivy-report.json in the workspace
                    sh 'trivy image -f json -o ${WORKSPACE}/trivy-report.json mohamedridhaa/achat-back:tagname'
                }
            }
        }
        stage('Publish Report') {
            steps {
                script {
                    // Example step to publish the report, e.g., archiving the artifacts
                    archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
                }
            }
        }/*
       stage('Import Reports to DefectDojo') {
    steps {
        script {
            // Import the report to DefectDojo
            sh 'curl -X POST "http://192.168.22.12:8080/api/v2/import-scan/" -H  "accept: application/json" -H  "Content-Type: multipart/form-data"  -H "Authorization: Token 7720bd55755821192c11d23305ba3dd1493558b5" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Trivy Scan" -F "close_old_findings=false" -F "push_to_jira=false" -F "file=@trivy-report.json" -F "product_name=DevSecOps" -F "engagement_name=Achats"'
            sh 'curl -X POST "http://192.168.22.12:8080/api/v2/import-scan/" -H  "accept: application/json" -H  "Content-Type: multipart/form-data"  -H "Authorization: Token 7720bd55755821192c11d23305ba3dd1493558b5" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Trufflehog Scan" -F "close_old_findings=false" -F "push_to_jira=false" -F "file=@trufflehog.json" -F "product_name=DevSecOps" -F "engagement_name=Achats"'      
            sh 'curl -X POST "http://192.168.22.12:8080/api/v2/import-scan/" -H  "accept: application/json" -H  "Content-Type: multipart/form-data"  -H "Authorization: Token 7720bd55755821192c11d23305ba3dd1493558b5" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Snyk Scan" -F "close_old_findings=false" -F "push_to_jira=false" -F "file=@snyk_iac.json" -F "product_name=DevSecOps" -F "engagement_name=Achats"'
        }



    }
}*/


    
        stage('AKS Deploy'){
            when {
                expression { params.CLOUD_TYPE == 'public' }
            }
            steps{
                dir('Back/achat') {
                    script {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubeconfig', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                            sh 'kubectl apply -f achats-manifests.yml'
                        }
                    }               
                }
            }
        }

        stage('AKS Kube-Bench'){
            when {
                expression { params.CLOUD_TYPE == 'public'}
            }
            steps{
                script{
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubeconfig', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                            sh 'docker run --rm -v `pwd`:/host aquasec/kube-bench:latest install'
                            sh './kube-bench --logtostderr --json > kube-bench-report.json'
                            sh 'cat kube-bench-report.txt'

                }
            }
        }
        }
        /*stage('Terraform Deployment') {
            when {
                expression { params.CLOUD_TYPE == 'private' }
            }
            steps {
                dir('Back/achat') {
                    script {
                        try {
                            sh 'terraform init'
                            sh 'terraform plan'
                            sh 'terraform apply --auto-approve'
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }*/
        stage('Install Ansible Playbook') {
    when {
        expression { params.CLOUD_TYPE == 'private' }
    }
    steps {
        dir('Back/achat/ansible') {
            script {
                
            ansiblePlaybook(
                            playbook: 'kube-dependencies.yml',
                            inventory: 'inventory.ini',
                            extras: '--private-key ${SSH_KEY_PATH} -u root'
                        )    
            ansiblePlaybook(
                            playbook: 'master.yml',
                            inventory: 'inventory.ini',
                            extras: '--private-key ${SSH_KEY_PATH} -u root'
                        )
           
            }
        }
    }
}
         stage('Transfer kubeconfig') {
            when {
        expression { params.CLOUD_TYPE == 'private' }
    }
            steps {
                script {
                    // Copier le fichier kubeconfig du nœud master vers Jenkins
                    sh 'scp root@192.168.22.85:/home/vagrant/.kube/config /home/vagrant/ansible-key/config'
                }
            }
        }
         stage('Install Helm Charts') {
             when {
        expression { params.CLOUD_TYPE == 'private' }
    }
            steps {
                script {
                    // Exécuter le playbook Ansible pour installer les charts Helm
                    sh 'ansible-playbook -i /home/vagrant/inventory.ini /home/vagrant/helm.yml'
                }
            }
        }

       /* stage('DAST ZAP Attacks'){
            steps{
                script{
                    sh 'docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py -t http://4.159.228.136/ -g gen.conf -r testreport.html'
                }
            }
        }*/
        /*
        stage('Docker Compose') {
            steps {
                dir('Back/achat') {
                    script {
                        try {
                            sh "docker compose up -d"
                        } catch (Exception e) {
                            emailext (attachLog: true, body: 'The pipeline number'+":$BUILD_NUMBER"+' is failed !! Please check the logs file bellow !!', subject: 'Jenkins Pipeline Failed', to: 'metjaku@gmail.com')
                            throw e
                        }
                    }
                }
            }
        }
    */
    }
}
