---
- name: Setup Kubernetes Cluster
  hosts: all
  become: yes
  vars:
    kube_version: "1.29.3-1.1"
    containerd_version: "1.6.28-2"
    k8s_repo_url: "https://pkgs.k8s.io/core:/stable:/v1.29/deb/"
    docker_gpg_url: "https://download.docker.com/linux/ubuntu/gpg"
    calico_operator_url: "https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/tigera-operator.yaml"
    calico_resources_url: "https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/custom-resources.yaml"
    calico_custom_cidr: "10.11.0.0/16"

  tasks:
    - name: Update apt repository and install dependencies
      apt:
        update_cache: yes
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: latest

    - name: Add Kubernetes APT keyring
      ansible.builtin.shell:
        cmd: "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -"
        

    - name: Add Kubernetes APT repository
      ansible.builtin.command:
        cmd: "echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list"
        creates: /etc/apt/sources.list.d/kubernetes.list

    - name: Update apt repository
      apt:
        update_cache: yes

    - name: Install Kubernetes components
      ansible.builtin.shell:
        cmd: >
          sudo apt-get update
          sudo apt-get install -y kubelet kubeadm kubectl
          sudo apt-mark hold kubelet kubeadm kubectl


    - name: Disable swap
      command: swapoff -a

    - name: Ensure swap is commented in /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^\s*([^#].*swap.*)$'
        replace: '# \1'

    - name: Load kernel modules
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf

    - name: Load overlay module
      modprobe:
        name: overlay
        state: present

    - name: Load br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: Set system configurations
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/k8s.conf

    - name: Apply sysctl settings
      command: sysctl --system

    - name: Update apt repository and install ca-certificates and curl
      apt:
        update_cache: yes
        name:
          - ca-certificates
          - curl
        state: latest

    - name: Add Docker's official GPG key
      ansible.builtin.command:
        cmd: "curl -fsSL {{ docker_gpg_url }} -o /etc/apt/keyrings/docker.asc"
        creates: /etc/apt/keyrings/docker.asc

    - name: Set permissions for Docker GPG key
      file:
        path: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Add Docker APT repository
      ansible.builtin.command:
        cmd: |
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt repository
      apt:
        update_cache: yes

    - name: Install containerd
      apt:
        name: containerd.io={{ containerd_version }}
        state: present

    - name: Configure containerd
      shell: |
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Enable SystemdCgroup for containerd
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
        enabled: yes

- name: Initialize Kubernetes Control Plane
  hosts: k8s_master
  become: yes
  tasks:
    - name: Initialize Kubernetes master node
      command: kubeadm init --pod-network-cidr={{ calico_custom_cidr }}
      register: kubeadm_init

    - name: Copy kubeconfig to user's home directory
      command: >
        /bin/bash -c "
        mkdir -p $HOME/.kube &&
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config &&
        chown $(id -u):$(id -g) $HOME/.kube/config"
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      when: kubeadm_init is succeeded

    - name: Deploy Calico network
      command: kubectl apply -f {{ calico_operator_url }}
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      when: kubeadm_init is succeeded

    - name: Download and modify Calico custom resources
      command: >
        /bin/bash -c "
        wget {{ calico_resources_url }} &&
        sed -i 's/cidr: 192.168.0.0\/16/cidr: {{ calico_custom_cidr }}/g' custom-resources.yaml &&
        kubectl apply -f custom-resources.yaml"
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      when: kubeadm_init is succeeded

- name: Join Worker Nodes
  hosts: k8s_worker
  become: yes
  vars:
    master_ip: "192.168.22.85"
  tasks:
    - name: Join worker node to the Kubernetes cluster
      shell: kubeadm join {{ master_ip }}:6443 --token {{ hostvars['master']['kubeadm_init'].stdout_lines | select("search", "token") | list | first | regex_search("[a-z0-9.]+") }} --discovery-token-ca-cert-hash {{ hostvars['master']['kubeadm_init'].stdout_lines | select("search", "sha256") | list | first | regex_search("sha256:[a-f0-9]+") }}
