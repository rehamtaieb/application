---
- name: Setup Kubernetes Cluster
  hosts: all
  become: yes
  vars:
    kube_version: "v1.28.0"
    group: "appowner"
    container_runtime: containerd
    network: calico
    service_cidr: "10.96.0.0/12"
    pod_network_cidr: "10.244.0.0/16"
    control_plane_ip: "20.108.66.230"
    kubeadm_opts: ""
    init_opts: ""

  tasks:
    - name: Verify variables
      debug:
        msg:
          - "kube_version: {{ kube_version }}"
          - "group: {{ group }}"
          - "container_runtime: {{ container_runtime }}"
          - "network: {{ network }}"
          - "service_cidr: {{ service_cidr }}"
          - "pod_network_cidr: {{ pod_network_cidr }}"
          - "control_plane_ip: {{ control_plane_ip }}"

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: Load kernel modules
      shell: |
        modprobe overlay
        modprobe br_netfilter

    - name: Create containerd config file
      file:
        path: "/etc/modules-load.d/containerd.conf"
        state: "touch"

    - name: Add containerd kernel modules to config
      blockinfile:
        path: "/etc/modules-load.d/containerd.conf"
        block: |
          overlay
          br_netfilter

    - name: Set system configurations for Kubernetes networking
      file:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        state: "touch"

    - name: Add sysctl settings
      blockinfile:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: Apply sysctl settings
      command: sysctl --system

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        update_cache: yes

    - name: Install containerd
      apt:
        name: containerd.io
        state: present

    - name: Ensure Kubernetes GPG key exists
      stat:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: kubernetes_gpg_key

    - name: Add Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        dest: /tmp/kubernetes-apt-key.gpg
      when: not kubernetes_gpg_key.stat.exists

    - name: Import Kubernetes GPG key
      command: sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-key.gpg
      when: not kubernetes_gpg_key.stat.exists

    - name: Add Kubernetes APT repository
      shell: |
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
        sudo apt-get update

    - name: Install Kubernetes components
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold Kubernetes packages
      shell: |
        apt-mark hold kubelet kubeadm kubectl containerd

    - name: Enable containerd service
      systemd:
        state: started
        name: containerd.service
        enabled: yes
        daemon_reload: yes

    - name: Enable kubelet service
      systemd:
        state: started
        name: kubelet.service
        enabled: yes
        daemon_reload: yes

- name: Initialize Kubernetes Control Plane
  hosts: k8s_master
  become: yes
  vars:
    kube_version: "v1.28.0"
    group: "appowner"
    container_runtime: containerd
    network: calico
    service_cidr: "10.96.0.0/12"
    pod_network_cidr: "10.244.0.0/16"
    control_plane_ip: "20.108.66.230"
    kubeadm_opts: ""
    init_opts: ""

  tasks:
    - name: Create appowner group if it doesn't exist
      group:
        name: "{{ group }}"
        state: present

    - name: Reset Kubernetes components
      shell: "kubeadm reset --force --cri-socket=/var/run/{{ container_runtime }}/{{ container_runtime }}.sock"
      become: true
      register: reset_cluster

    - name: Initialize Kubernetes cluster
      when: reset_cluster is succeeded
      shell: |
        kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      become: true
      register: init_cluster

    - name: Create user .kube directory
      file:
        path: ".kube/"
        state: directory
        mode: 0755

    - name: Copy admin.conf to user home directory
      copy:
        src: "/etc/kubernetes/admin.conf"
        dest: ".kube/config"
        owner: "{{ ansible_user | default(ansible_user_id) }}"
        group: "{{ group | default(ansible_user_id) }}"
        mode: 0755
        remote_src: yes
      become: true

    - name: Install Calico network plugin
      shell: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

    - name: Add kubectl alias for user
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        line: "alias k='kubectl'"
        owner: "{{ ansible_user }}"
        regexp: '^alias k=''kubectl''$'
        state: present
        insertafter: EOF
        create: True

- name: Join Worker Node
  hosts: k8s_worker
  become: yes
  vars:
    kube_version: "v1.28.0"
    group: "appowner"
    container_runtime: containerd
    network: calico
    service_cidr: "10.96.0.0/12"
    pod_network_cidr: "10.244.0.0/16"
    control_plane_ip: "20.108.66.230"
    kubeadm_opts: ""
    init_opts: ""

  tasks:
    - name: Generate join command
      shell: kubeadm token create --print-join-command
      register: kubeadm_join_cmd
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - set_fact:
        kubeadm_join: "{{ kubeadm_join_cmd.stdout }}"

    - name: Join worker node to cluster
      shell: "{{ kubeadm_join }}"
      register: join_output
      ignore_errors: yes

    - name: Check join command output
      debug:
        msg: "{{ join_output.stdout }}"

- name: Verify Cluster Status
  hosts: k8s_master
  become: yes
  vars:
    kube_version: "v1.28.0"
    group: "appowner"
    container_runtime: containerd
    network: calico
    service_cidr: "10.96.0.0/12"
    pod_network_cidr: "10.244.0.0/16"
    control_plane_ip: "20.108.66.230"
    kubeadm_opts: ""
    init_opts: ""

  tasks:
    - name: Check nodes status
      command: kubectl get nodes
      register: nodes_status

    - name: Display nodes status
      debug:
        msg: "{{ nodes_status.stdout }}"

    - name: Check pods status in kube-system namespace
      command: kubectl get pods -n kube-system
      register: pods_status

    - name: Display pods status
      debug:
        msg: "{{ pods_status.stdout }}"

- name: Update and Reboot if Needed
  hosts: all
  become: yes
  tasks:
    - name: Update all packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Reboot if required
      shell: sleep 10 && /sbin/shutdown -r now 'Rebooting as requested by the system' 
      args:
        removes: /var/run/reboot-required
      async: 300
      poll: 0
      ignore_errors: true
