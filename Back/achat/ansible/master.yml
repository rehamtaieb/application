---
- name: Setup Kubernetes Cluster
  hosts: all
  become: yes
  vars:
    kube_version: "1.29"
    group: "appowner"
    container_runtime: containerd
    network: calico
    service_cidr: "10.96.0.0/12"
    pod_network_cidr: "10.244.0.0/16"
    control_plane_ip: "{{ hostvars[groups['control_planes'][0]]['ansible_default_ipv4'].address | default(groups['control_planes'][0]) }}"

    kubeadm_opts: ""
    init_opts: ""

  tasks:
    - name: disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: modprobe
      shell: |
        modprobe overlay
        modprobe br_netfilter

    - name: create containerd config file
      file:
        path: "/etc/modules-load.d/containerd.conf"
        state: "touch"

    - name: add conf for containerd
      blockinfile:
        path: "/etc/modules-load.d/containerd.conf"
        block: |
          overlay
          br_netfilter

    - name: set system configurations for Kubernetes networking
      file:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        state: "touch"

    - name: add conf for containerd
      blockinfile:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: apply new settings
      command: sysctl --system

    # - name: install containerd
    #   apt:
    #     update_cache: yes
    #     name: containerd

    # containerd.io >1.6
    - name: add docker apt gpg key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: get OS release name
      command: "lsb_release -cs"
      changed_when: false
      register: lsb_rel

    - name: add docker apt repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ lsb_rel.stdout }} stable
        state: present

    - name: install containerd >1.6 from docker repository
      apt:
        update_cache: yes
        name: containerd.io

    - name: configure containerd
      shell: |
        mkdir -p /etc/containerd
        containerd config default | tee /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
        systemctl restart containerd

    - name: add google apt gpg key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: add kubernetes apt repository
      shell: |
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
        curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        sudo apt-get update
      state: present
      

    - name: install kubernetes
      apt:
        update_cache: yes
        pkg:
          - kubelet={{ kube_version + '-00' }}
          - kubeadm={{ kube_version + '-00' }}
          - kubectl={{ kube_version + '-00' }}

    - name: exclude kube components from apt upgrades
      shell: |
        apt-mark hold kubelet kubeadm kubectl containerd

    - name: enable containerd systemd service
      systemd:
        state: started
        name: containerd.service
        enabled: yes
        daemon_reload: yes

    - name: enable kubelet systemd service
      systemd:
        state: started
        name: kubelet.service
        enabled: yes
        daemon_reload: yes

- name: Initialize Kubernetes Control Plane
  hosts: k8s_master
  become: yes
  tasks:
    - name: reset kubernetes component
      shell: "kubeadm reset --force --cri-socket=/var/run/{{ container_runtime }}/{{ container_runtime }}.sock"
      become: true
      register: reset_cluster

    - name: init kubernetes cluster
      when: reset_cluster is succeeded
      shell: |
        kubeadm init --service-cidr {{ service_cidr }} \
                    --kubernetes-version {{ kube_version }} \
                    --pod-network-cidr {{ pod_network_cidr }} \
                    --apiserver-advertise-address {{ control_plane_ip }} \
                    --cri-socket /var/run/{{ container_runtime }}/{{ container_runtime }}.sock \
                    {{ kubeadm_opts }} \
                    {{ init_opts }}
      become: true
      register: init_cluster

    - name: create user .kube directory
      file:
        path: ".kube/"
        state: directory
        mode: 0755

    - name: copy admin.conf to user home directory
      copy:
        src: "/etc/kubernetes/admin.conf"
        dest: ".kube/config"
        owner: "{{ ansible_user | default(ansible_user_id) }}"
        group: "{{ group | default(ansible_user_id) }}"
        mode: 0755
        remote_src: yes
      become: true

    - name: install pod network
      shell: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

    - name: Add k alias for user
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        line: "alias k='kubectl'"
        owner: "{{ ansible_user }}"
        regexp: '^alias k=''kubectl''$'
        state: present
        insertafter: EOF
        create: True

- name: Join Worker Node
  hosts: k8s_worker
  become: yes
  tasks:
    - name: generate join command
      shell: kubeadm token create --print-join-command
      register: kubeadm_join_cmd
      delegate_to: "{{ groups['control_planes'][0] }}"

    - set_fact:
        kubeadm_join: "{{ kubeadm_join_cmd.stdout }}"

    - name: join worker node to cluster
      shell: "{{ kubeadm_join }}"
      become: true

- name: Update
  hosts: all
  become: yes
  tasks:
    - name: update all packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: reboot if requested by the system
      shell: sleep 10 && /sbin/shutdown -r now 'rebooting as requested by the system' 
      args:
        removes: /var/run/reboot-required
      async: 300
      poll: 0
      ignore_errors: true
